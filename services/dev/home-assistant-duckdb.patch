+From 6bd464e360eabf8517496892ebbbb4b26edd3b07 Mon Sep 17 00:00:00 2001
From: Nathan Bijnens <nathan@nathan.gs>
Date: Wed, 21 Aug 2024 21:59:40 +0200
Subject: [PATCH] DuckDB on master

diff --git a/homeassistant/components/recorder/auto_repairs/schema.py b/homeassistant/components/recorder/auto_repairs/schema.py
index 1373f466bc..3d636c6f8f 100644
--- a/homeassistant/components/recorder/auto_repairs/schema.py
+++ b/homeassistant/components/recorder/auto_repairs/schema.py
@@ -150,10 +150,11 @@ def validate_db_schema_precision(
 ) -> set[str]:
     """Do some basic checks for common schema errors caused by manual migration."""
     schema_errors: set[str] = set()
-    # Wrong precision is only an issue for MySQL / MariaDB / PostgreSQL
+    # Wrong precision is only an issue for MySQL / MariaDB / PostgreSQL / DuckDB
     if instance.dialect_name not in (
         SupportedDialect.MYSQL,
         SupportedDialect.POSTGRESQL,
+        SupportedDialect.DUCKDB
     ):
         return schema_errors
     try:
diff --git a/homeassistant/components/recorder/const.py b/homeassistant/components/recorder/const.py
index 066ae93897..4c80202f9a 100644
--- a/homeassistant/components/recorder/const.py
+++ b/homeassistant/components/recorder/const.py
@@ -79,3 +79,4 @@ class SupportedDialect(StrEnum):
     SQLITE = "sqlite"
     MYSQL = "mysql"
     POSTGRESQL = "postgresql"
+    DUCKDB = "duckdb"

diff --git a/homeassistant/components/recorder/db_schema.py b/homeassistant/components/recorder/db_schema.py
index 186b873047..72583a12e1 100644
--- a/homeassistant/components/recorder/db_schema.py
+++ b/homeassistant/components/recorder/db_schema.py
@@ -247,7 +247,7 @@ class Events(Base):
         _DEFAULT_TABLE_ARGS,
     )
     __tablename__ = TABLE_EVENTS
-    event_id: Mapped[int] = mapped_column(Integer, Identity(), primary_key=True)
+    event_id: Mapped[int] = mapped_column(Integer, primary_key=True)
     event_type: Mapped[str | None] = mapped_column(UNUSED_LEGACY_COLUMN)
     event_data: Mapped[str | None] = mapped_column(UNUSED_LEGACY_COLUMN)
     origin: Mapped[str | None] = mapped_column(UNUSED_LEGACY_COLUMN)
@@ -258,7 +258,7 @@ class Events(Base):
     context_user_id: Mapped[str | None] = mapped_column(UNUSED_LEGACY_COLUMN)
     context_parent_id: Mapped[str | None] = mapped_column(UNUSED_LEGACY_COLUMN)
     data_id: Mapped[int | None] = mapped_column(
-        Integer, ForeignKey("event_data.data_id"), index=True
+        Integer, ForeignKey("event_data.data_id")
     )
     context_id_bin: Mapped[bytes | None] = mapped_column(CONTEXT_BINARY_TYPE)
     context_user_id_bin: Mapped[bytes | None] = mapped_column(CONTEXT_BINARY_TYPE)
@@ -335,7 +335,7 @@ class EventData(Base):
 
     __table_args__ = (_DEFAULT_TABLE_ARGS,)
     __tablename__ = TABLE_EVENT_DATA
-    data_id: Mapped[int] = mapped_column(Integer, Identity(), primary_key=True)
+    data_id: Mapped[int] = mapped_column(Integer, primary_key=True)
     hash: Mapped[int | None] = mapped_column(UINT_32_TYPE, index=True)
     # Note that this is not named attributes to avoid confusion with the states table
     shared_data: Mapped[str | None] = mapped_column(
@@ -391,7 +391,7 @@ class EventTypes(Base):
 
     __table_args__ = (_DEFAULT_TABLE_ARGS,)
     __tablename__ = TABLE_EVENT_TYPES
-    event_type_id: Mapped[int] = mapped_column(Integer, Identity(), primary_key=True)
+    event_type_id: Mapped[int] = mapped_column(Integer, primary_key=True)
     event_type: Mapped[str | None] = mapped_column(
         String(MAX_LENGTH_EVENT_EVENT_TYPE), index=True, unique=True
     )
@@ -421,7 +421,7 @@ class States(Base):
         _DEFAULT_TABLE_ARGS,
     )
     __tablename__ = TABLE_STATES
-    state_id: Mapped[int] = mapped_column(Integer, Identity(), primary_key=True)
+    state_id: Mapped[int] = mapped_column(Integer, primary_key=True)
     entity_id: Mapped[str | None] = mapped_column(UNUSED_LEGACY_COLUMN)
     state: Mapped[str | None] = mapped_column(String(MAX_LENGTH_STATE_STATE))
     attributes: Mapped[str | None] = mapped_column(UNUSED_LEGACY_COLUMN)
@@ -434,10 +434,10 @@ class States(Base):
         TIMESTAMP_TYPE, default=time.time, index=True
     )
     old_state_id: Mapped[int | None] = mapped_column(
-        Integer, ForeignKey("states.state_id"), index=True
+        Integer, ForeignKey("states.state_id")
     )
     attributes_id: Mapped[int | None] = mapped_column(
-        Integer, ForeignKey("state_attributes.attributes_id"), index=True
+        Integer, ForeignKey("state_attributes.attributes_id")
     )
     context_id: Mapped[str | None] = mapped_column(UNUSED_LEGACY_COLUMN)
     context_user_id: Mapped[str | None] = mapped_column(UNUSED_LEGACY_COLUMN)
@@ -560,7 +560,7 @@ class StateAttributes(Base):
 
     __table_args__ = (_DEFAULT_TABLE_ARGS,)
     __tablename__ = TABLE_STATE_ATTRIBUTES
-    attributes_id: Mapped[int] = mapped_column(Integer, Identity(), primary_key=True)
+    attributes_id: Mapped[int] = mapped_column(Integer, primary_key=True)
     hash: Mapped[int | None] = mapped_column(UINT_32_TYPE, index=True)
     # Note that this is not named attributes to avoid confusion with the states table
     shared_attrs: Mapped[str | None] = mapped_column(
@@ -628,7 +628,7 @@ class StatesMeta(Base):
 
     __table_args__ = (_DEFAULT_TABLE_ARGS,)
     __tablename__ = TABLE_STATES_META
-    metadata_id: Mapped[int] = mapped_column(Integer, Identity(), primary_key=True)
+    metadata_id: Mapped[int] = mapped_column(Integer, primary_key=True)
     entity_id: Mapped[str | None] = mapped_column(
         String(MAX_LENGTH_STATE_ENTITY_ID), index=True, unique=True
     )
@@ -645,7 +645,7 @@ class StatesMeta(Base):
 class StatisticsBase:
     """Statistics base class."""
 
-    id: Mapped[int] = mapped_column(Integer, Identity(), primary_key=True)
+    id: Mapped[int] = mapped_column(Integer, primary_key=True)
     created: Mapped[datetime | None] = mapped_column(UNUSED_LEGACY_DATETIME_COLUMN)
     created_ts: Mapped[float | None] = mapped_column(TIMESTAMP_TYPE, default=time.time)
     metadata_id: Mapped[int | None] = mapped_column(
@@ -742,7 +742,7 @@ class StatisticsMeta(Base):
 
     __table_args__ = (_DEFAULT_TABLE_ARGS,)
     __tablename__ = TABLE_STATISTICS_META
-    id: Mapped[int] = mapped_column(Integer, Identity(), primary_key=True)
+    id: Mapped[int] = mapped_column(Integer, primary_key=True)
     statistic_id: Mapped[str | None] = mapped_column(
         String(255), index=True, unique=True
     )
@@ -766,7 +766,7 @@ class RecorderRuns(Base):
         _DEFAULT_TABLE_ARGS,
     )
     __tablename__ = TABLE_RECORDER_RUNS
-    run_id: Mapped[int] = mapped_column(Integer, Identity(), primary_key=True)
+    run_id: Mapped[int] = mapped_column(Integer, primary_key=True)
     start: Mapped[datetime] = mapped_column(DATETIME_TYPE, default=dt_util.utcnow)
     end: Mapped[datetime | None] = mapped_column(DATETIME_TYPE)
     closed_incorrect: Mapped[bool] = mapped_column(Boolean, default=False)
@@ -805,7 +805,7 @@ class SchemaChanges(Base):
     __tablename__ = TABLE_SCHEMA_CHANGES
     __table_args__ = (_DEFAULT_TABLE_ARGS,)
 
-    change_id: Mapped[int] = mapped_column(Integer, Identity(), primary_key=True)
+    change_id: Mapped[int] = mapped_column(Integer, primary_key=True)
     schema_version: Mapped[int | None] = mapped_column(Integer)
     changed: Mapped[datetime] = mapped_column(DATETIME_TYPE, default=dt_util.utcnow)
 
@@ -825,7 +825,7 @@ class StatisticsRuns(Base):
     __tablename__ = TABLE_STATISTICS_RUNS
     __table_args__ = (_DEFAULT_TABLE_ARGS,)
 
-    run_id: Mapped[int] = mapped_column(Integer, Identity(), primary_key=True)
+    run_id: Mapped[int] = mapped_column(Integer, primary_key=True)
     start: Mapped[datetime] = mapped_column(DATETIME_TYPE, index=True)
 
     def __repr__(self) -> str:


diff --git a/homeassistant/components/recorder/repack.py b/homeassistant/components/recorder/repack.py
index 8c7ad137d8..4050ffb4e9 100644
--- a/homeassistant/components/recorder/repack.py
+++ b/homeassistant/components/recorder/repack.py
@@ -38,6 +38,16 @@ def repack_database(instance: Recorder) -> None:
             conn.execute(text("VACUUM"))
             conn.commit()
         return
+    
+    if dialect_name == SupportedDialect.DUCKDB:
+        _LOGGER.debug("Vacuuming & Checkpointing DB to free space")
+        with instance.engine.connect().execution_options(
+            isolation_level="AUTOCOMMIT"
+        ) as conn:
+            conn.execute(text("VACUUM ANALYZE"))
+            conn.execute(text("CHECKPOINT"))
+            conn.commit()
+        return
 
     # Optimize mysql / mariadb tables to free up space on disk
     if dialect_name == SupportedDialect.MYSQL:
diff --git a/homeassistant/components/recorder/system_health/__init__.py b/homeassistant/components/recorder/system_health/__init__.py
index 16feaa1988..d95c4f45e3 100644
--- a/homeassistant/components/recorder/system_health/__init__.py
+++ b/homeassistant/components/recorder/system_health/__init__.py
@@ -15,11 +15,13 @@ from ..util import session_scope
 from .mysql import db_size_bytes as mysql_db_size_bytes
 from .postgresql import db_size_bytes as postgresql_db_size_bytes
 from .sqlite import db_size_bytes as sqlite_db_size_bytes
+from .duckdb import db_size_bytes as duckdb_db_size_bytes
 
 DIALECT_TO_GET_SIZE = {
     SupportedDialect.SQLITE: sqlite_db_size_bytes,
     SupportedDialect.MYSQL: mysql_db_size_bytes,
     SupportedDialect.POSTGRESQL: postgresql_db_size_bytes,
+    SupportedDialect.DUCKDB: duckdb_db_size_bytes
 }
 
 
diff --git a/homeassistant/components/recorder/system_health/duckdb.py b/homeassistant/components/recorder/system_health/duckdb.py
new file mode 100644
index 0000000000..fa1e648341
--- /dev/null
+++ b/homeassistant/components/recorder/system_health/duckdb.py
@@ -0,0 +1,22 @@
+"""Provide info to system health for duckdb."""
+
+from __future__ import annotations
+
+from sqlalchemy import text
+from sqlalchemy.orm.session import Session
+
+
+def db_size_bytes(session: Session, database_name: str) -> float | None:
+    """Get the duckdb database size."""
+    session.execute(text("SET database_size;"))    
+    size = session.execute(
+        text(
+            "SELECT database_size "
+            "FROM pragma_database_size();"
+        )
+    ).scalar()
+
+    if not size:
+        return None
+
+    return float(size)
diff --git a/homeassistant/components/recorder/util.py b/homeassistant/components/recorder/util.py
index 4d494aed7d..89da2ef8a4 100644
--- a/homeassistant/components/recorder/util.py
+++ b/homeassistant/components/recorder/util.py
@@ -95,6 +95,7 @@ RECOMMENDED_MIN_VERSION_MARIA_DB_108 = _simple_version("10.8.4")
 MARIADB_WITH_FIXED_IN_QUERIES_108 = _simple_version("10.8.4")
 MIN_VERSION_MYSQL = _simple_version("8.0.0")
 MIN_VERSION_PGSQL = _simple_version("12.0")
+MIN_VERSION_DUCKDB = _simple_version("0.9")
 MIN_VERSION_SQLITE = _simple_version("3.31.0")
 UPCOMING_MIN_VERSION_SQLITE = _simple_version("3.40.1")
 MIN_VERSION_SQLITE_MODERN_BIND_VARS = _simple_version("3.32.0")
@@ -352,7 +353,7 @@ def _fail_unsupported_dialect(dialect_name: str) -> NoReturn:
             "starting. Please migrate your database to a supported software"
         ),
         dialect_name,
-        "MariaDB ≥ 10.3, MySQL ≥ 8.0, PostgreSQL ≥ 12, SQLite ≥ 3.31.0",
+        "MariaDB ≥ 10.3, MySQL ≥ 8.0, PostgreSQL ≥ 12, SQLite ≥ 3.31.0, DuckDB > 0.9.0",
     )
     raise UnsupportedDialect
 
@@ -607,6 +608,17 @@ def setup_connection_for_dialect(
                 _raise_if_version_unsupported(
                     version or version_string, "PostgreSQL", MIN_VERSION_PGSQL
                 )
+    elif dialect_name == SupportedDialect.DUCKDB:
+        max_bind_vars = DEFAULT_MAX_BIND_VARS
+        if first_connection:
+            # server_version_num was added in 2006
+            result = query_on_connection(dbapi_connection, "PRAGMA version")
+            version_string = result[0][0]
+            version = _extract_version_from_server_response(version_string)
+            if not version or version < MIN_VERSION_DUCKDB:
+                _raise_if_version_unsupported(
+                    version or version_string, "DuckDB", MIN_VERSION_DUCKDB
+                )
 
     else:
         _fail_unsupported_dialect(dialect_name)
@@ -915,6 +927,13 @@ def filter_unique_constraint_integrity_error(
             and err.orig.pgcode == "23505"
         ):
             ignore = True
+        if (
+            dialect_name == SupportedDialect.DUCKDB
+            and err.orig
+            and hasattr(err.orig, "pgcode")
+            and err.orig.pgcode == "23505"
+        ):
+            ignore = True
         if (
             dialect_name == SupportedDialect.MYSQL
             and err.orig
